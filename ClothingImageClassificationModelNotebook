{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6c5044c2",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-10-04T14:58:10.389415Z",
     "iopub.status.busy": "2024-10-04T14:58:10.389029Z",
     "iopub.status.idle": "2024-10-04T14:58:26.832733Z",
     "shell.execute_reply": "2024-10-04T14:58:26.831472Z"
    },
    "papermill": {
     "duration": 16.451515,
     "end_time": "2024-10-04T14:58:26.835276",
     "exception": false,
     "start_time": "2024-10-04T14:58:10.383761",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from IPython.display import display\n",
    "import pandas as pd\n",
    "import os\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "import matplotlib.pyplot as plt\n",
    "from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n",
    "import warnings\n",
    "from PIL import Image\n",
    "from keras import Sequential\n",
    "from keras.src.engine.input_layer import InputLayer\n",
    "from keras.src.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, ActivityRegularization, BatchNormalization\n",
    "from keras.src.utils import img_to_array, to_categorical\n",
    "from sklearn.model_selection import train_test_split\n",
    "import shutil\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e1e7d33",
   "metadata": {
    "papermill": {
     "duration": 0.002807,
     "end_time": "2024-10-04T14:58:26.841588",
     "exception": false,
     "start_time": "2024-10-04T14:58:26.838781",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This piece of code attempts to read the images within the original directory. The image then get formatted converting it to grayscale and to the size of 256*256 and saves the files into compressed_images. if the Image is corrupted it gets removed from the newly updated images csv."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1bb5f175",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T14:58:26.850115Z",
     "iopub.status.busy": "2024-10-04T14:58:26.848881Z",
     "iopub.status.idle": "2024-10-04T14:59:57.599518Z",
     "shell.execute_reply": "2024-10-04T14:59:57.598426Z"
    },
    "papermill": {
     "duration": 90.757814,
     "end_time": "2024-10-04T14:59:57.602429",
     "exception": false,
     "start_time": "2024-10-04T14:58:26.844615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error processing image d028580f-9a98-4fb5-a6c9-5dc362ad3f09: cannot identify image file '/kaggle/input/clothing-dataset-full/images_compressed/d028580f-9a98-4fb5-a6c9-5dc362ad3f09.jpg'\n",
      "Error processing image 1d0129a1-f29a-4a3f-b103-f651176183eb: cannot identify image file '/kaggle/input/clothing-dataset-full/images_compressed/1d0129a1-f29a-4a3f-b103-f651176183eb.jpg'\n",
      "Error processing image 784d67d4-b95e-4abb-baf7-8024f18dc3c8: cannot identify image file '/kaggle/input/clothing-dataset-full/images_compressed/784d67d4-b95e-4abb-baf7-8024f18dc3c8.jpg'\n",
      "Error processing image c60e486d-10ed-4f64-abab-5bb698c736dd: cannot identify image file '/kaggle/input/clothing-dataset-full/images_compressed/c60e486d-10ed-4f64-abab-5bb698c736dd.jpg'\n",
      "Error processing image 040d73b7-21b5-4cf2-84fc-e1a80231b202: cannot identify image file '/kaggle/input/clothing-dataset-full/images_compressed/040d73b7-21b5-4cf2-84fc-e1a80231b202.jpg'\n"
     ]
    }
   ],
   "source": [
    "clothing_images_df = pd.read_csv(\"/kaggle/input/clothing-dataset-full/images.csv\")\n",
    "output_directory = \"compressed_images\"\n",
    "os.makedirs(output_directory, exist_ok=True)\n",
    "\n",
    "for img_name in clothing_images_df[\"image\"]:\n",
    "    try:\n",
    "        # Open the original image\n",
    "        img = Image.open(f\"/kaggle/input/clothing-dataset-full/images_compressed/{img_name}.jpg\")\n",
    "        \n",
    "        # Resize the image to (256, 256)\n",
    "        resized_img = img.resize((256, 256))\n",
    "        \n",
    "        # Convert the image to grayscale\n",
    "        grayscale_img = resized_img.convert(\"L\")\n",
    "        \n",
    "        # Save the compressed image to the \"compressed_images\" directory\n",
    "        output_path = f\"{output_directory}/{img_name}.jpg\"\n",
    "        grayscale_img.save(output_path)\n",
    "    except Exception as ex:\n",
    "        # Handle exceptions (print and continue, or add custom logic)\n",
    "        clothing_images_df = clothing_images_df[clothing_images_df[\"image\"] != img_name]\n",
    "        print(f\"Error processing image {img_name}: {ex}\")\n",
    "\n",
    "# Save the updated DataFrame to CSV\n",
    "clothing_images_df.to_csv(\"images.csv\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf363875",
   "metadata": {
    "papermill": {
     "duration": 0.00325,
     "end_time": "2024-10-04T14:59:57.609526",
     "exception": false,
     "start_time": "2024-10-04T14:59:57.606276",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This code prints the unique clothing labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "36a68d90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T14:59:57.618267Z",
     "iopub.status.busy": "2024-10-04T14:59:57.617851Z",
     "iopub.status.idle": "2024-10-04T14:59:57.640333Z",
     "shell.execute_reply": "2024-10-04T14:59:57.639079Z"
    },
    "papermill": {
     "duration": 0.029877,
     "end_time": "2024-10-04T14:59:57.642929",
     "exception": false,
     "start_time": "2024-10-04T14:59:57.613052",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Not sure' 'T-Shirt' 'Shoes' 'Shorts' 'Shirt' 'Pants' 'Skirt' 'Other'\n",
      " 'Top' 'Outwear' 'Dress' 'Body' 'Longsleeve' 'Undershirt' 'Hat' 'Polo'\n",
      " 'Blouse' 'Hoodie' 'Skip' 'Blazer']\n"
     ]
    }
   ],
   "source": [
    "clothing_images_df = pd.read_csv(\"images.csv\")\n",
    "print(clothing_images_df[\"label\"].unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efe3ca72",
   "metadata": {
    "papermill": {
     "duration": 0.003234,
     "end_time": "2024-10-04T14:59:57.649754",
     "exception": false,
     "start_time": "2024-10-04T14:59:57.646520",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3a00f215",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T14:59:57.658843Z",
     "iopub.status.busy": "2024-10-04T14:59:57.657847Z",
     "iopub.status.idle": "2024-10-04T14:59:58.259442Z",
     "shell.execute_reply": "2024-10-04T14:59:58.257781Z"
    },
    "papermill": {
     "duration": 0.609285,
     "end_time": "2024-10-04T14:59:58.262479",
     "exception": false,
     "start_time": "2024-10-04T14:59:57.653194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "labels = clothing_images_df[\"label\"].unique()\n",
    "counts = []\n",
    "\n",
    "for label in labels:\n",
    "    counts.append(len(clothing_images_df[clothing_images_df[\"label\"]==label]))\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(labels, counts, color='skyblue')\n",
    "plt.xlabel('Labels')\n",
    "plt.ylabel('Counts')\n",
    "plt.title('Distribution of Labels')\n",
    "plt.xticks(rotation=45, ha='right')\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7e9616a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T14:59:58.273563Z",
     "iopub.status.busy": "2024-10-04T14:59:58.273155Z",
     "iopub.status.idle": "2024-10-04T15:00:04.433377Z",
     "shell.execute_reply": "2024-10-04T15:00:04.432234Z"
    },
    "papermill": {
     "duration": 6.168809,
     "end_time": "2024-10-04T15:00:04.436112",
     "exception": false,
     "start_time": "2024-10-04T14:59:58.267303",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = []\n",
    "y = []\n",
    "images = {}\n",
    "\n",
    "for index, row in clothing_images_df.iterrows():\n",
    "    try:\n",
    "        img = Image.open(os.getcwd() + f\"/compressed_images/{row['image']}.jpg\")\n",
    "        y.append(row[\"label\"])\n",
    "        X.append(img_to_array(img))\n",
    "    except Exception as ex:\n",
    "        print(ex)\n",
    "X = np.array(X)\n",
    "\n",
    "clothing_images_df[\"label\"] = pd.Categorical(clothing_images_df[\"label\"])\n",
    "label_categories = pd.Categorical(y, categories=clothing_images_df[\"label\"].unique(), ordered=True)\n",
    "df = pd.DataFrame(data={\"label\": label_categories})\n",
    "y = df[\"label\"].cat.codes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "74b08731",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T15:00:04.446719Z",
     "iopub.status.busy": "2024-10-04T15:00:04.446308Z",
     "iopub.status.idle": "2024-10-04T22:04:57.791897Z",
     "shell.execute_reply": "2024-10-04T22:04:57.790253Z"
    },
    "papermill": {
     "duration": 25493.667594,
     "end_time": "2024-10-04T22:04:58.108200",
     "exception": false,
     "start_time": "2024-10-04T15:00:04.440606",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "237/237 [==============================] - 1272s 5s/step - loss: 2.9618 - accuracy: 0.1874 - categorical_crossentropy: 2.9447 - val_loss: 2.9010 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.9009\n",
      "Epoch 2/20\n",
      "237/237 [==============================] - 1285s 5s/step - loss: 2.8579 - accuracy: 0.1898 - categorical_crossentropy: 2.8579 - val_loss: 2.8288 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.8288\n",
      "Epoch 3/20\n",
      "237/237 [==============================] - 1263s 5s/step - loss: 2.7925 - accuracy: 0.1898 - categorical_crossentropy: 2.7925 - val_loss: 2.7760 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.7760\n",
      "Epoch 4/20\n",
      "237/237 [==============================] - 1269s 5s/step - loss: 2.7449 - accuracy: 0.1898 - categorical_crossentropy: 2.7449 - val_loss: 2.7380 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.7380\n",
      "Epoch 5/20\n",
      "237/237 [==============================] - 1282s 5s/step - loss: 2.7102 - accuracy: 0.1898 - categorical_crossentropy: 2.7101 - val_loss: 2.7104 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.7103\n",
      "Epoch 6/20\n",
      "237/237 [==============================] - 1287s 5s/step - loss: 2.6848 - accuracy: 0.1898 - categorical_crossentropy: 2.6847 - val_loss: 2.6903 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.6903\n",
      "Epoch 7/20\n",
      "237/237 [==============================] - 1277s 5s/step - loss: 2.6660 - accuracy: 0.1898 - categorical_crossentropy: 2.6660 - val_loss: 2.6755 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.6755\n",
      "Epoch 8/20\n",
      "237/237 [==============================] - 1275s 5s/step - loss: 2.6519 - accuracy: 0.1898 - categorical_crossentropy: 2.6519 - val_loss: 2.6643 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.6643\n",
      "Epoch 9/20\n",
      "237/237 [==============================] - 1273s 5s/step - loss: 2.6409 - accuracy: 0.1898 - categorical_crossentropy: 2.6409 - val_loss: 2.6557 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.6557\n",
      "Epoch 10/20\n",
      "237/237 [==============================] - 1274s 5s/step - loss: 2.6324 - accuracy: 0.1898 - categorical_crossentropy: 2.6324 - val_loss: 2.6488 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.6488\n",
      "Epoch 11/20\n",
      "237/237 [==============================] - 1281s 5s/step - loss: 2.6254 - accuracy: 0.1898 - categorical_crossentropy: 2.6254 - val_loss: 2.6434 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.6434\n",
      "Epoch 12/20\n",
      "237/237 [==============================] - 1283s 5s/step - loss: 2.6198 - accuracy: 0.1898 - categorical_crossentropy: 2.6198 - val_loss: 2.6388 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.6388\n",
      "Epoch 13/20\n",
      "237/237 [==============================] - 1285s 5s/step - loss: 2.6151 - accuracy: 0.1898 - categorical_crossentropy: 2.6151 - val_loss: 2.6350 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.6350\n",
      "Epoch 14/20\n",
      "237/237 [==============================] - 1278s 5s/step - loss: 2.6111 - accuracy: 0.1898 - categorical_crossentropy: 2.6111 - val_loss: 2.6319 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.6319\n",
      "Epoch 15/20\n",
      "237/237 [==============================] - 1267s 5s/step - loss: 2.6077 - accuracy: 0.1898 - categorical_crossentropy: 2.6077 - val_loss: 2.6291 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.6291\n",
      "Epoch 16/20\n",
      "237/237 [==============================] - 1280s 5s/step - loss: 2.6048 - accuracy: 0.1898 - categorical_crossentropy: 2.6048 - val_loss: 2.6268 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.6268\n",
      "Epoch 17/20\n",
      "237/237 [==============================] - 1255s 5s/step - loss: 2.6023 - accuracy: 0.1898 - categorical_crossentropy: 2.6023 - val_loss: 2.6249 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.6249\n",
      "Epoch 18/20\n",
      "237/237 [==============================] - 1255s 5s/step - loss: 2.6002 - accuracy: 0.1898 - categorical_crossentropy: 2.6002 - val_loss: 2.6231 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.6231\n",
      "Epoch 19/20\n",
      "237/237 [==============================] - 1274s 5s/step - loss: 2.5982 - accuracy: 0.1898 - categorical_crossentropy: 2.5982 - val_loss: 2.6216 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.6216\n",
      "Epoch 20/20\n",
      "237/237 [==============================] - 1276s 5s/step - loss: 2.5965 - accuracy: 0.1898 - categorical_crossentropy: 2.5965 - val_loss: 2.6203 - val_accuracy: 0.1815 - val_categorical_crossentropy: 2.6203\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.History at 0x7a426f888910>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(BatchNormalization())\n",
    "model.add(InputLayer(input_shape=(500, 500, 1)))\n",
    "model.add(Conv2D(64, kernel_size=3, activation=\"relu\"))\n",
    "model.add(Conv2D(64, kernel_size=3, activation=\"relu\"))\n",
    "model.add(Conv2D(32, kernel_size=3, activation=\"relu\"))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Conv2D(16, kernel_size=3, activation=\"relu\"))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(ActivityRegularization(l1=0.001))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(len(df[\"label\"].unique()), activation=\"softmax\"))\n",
    "\n",
    "EarlyStopping = keras.callbacks.EarlyStopping(\n",
    "    monitor=\"val_loss\",\n",
    "    min_delta=0,\n",
    "    verbose=0,\n",
    "    patience=3,  # Increased patience\n",
    "    mode=\"auto\",\n",
    "    baseline=None,\n",
    "    restore_best_weights=True,  # Restore weights for the epoch with the best value\n",
    "    start_from_epoch=4\n",
    ")\n",
    "\n",
    "tensorBoard = keras.callbacks.TensorBoard(\n",
    "    log_dir=\"logs\",\n",
    "    histogram_freq=1\n",
    ")\n",
    "\n",
    "\n",
    "model.compile(optimizer=\"sgd\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\", \"categorical_crossentropy\"])  # Switched to categorical crossentropy\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=.7, random_state=42)\n",
    "y_train_one_hot = to_categorical(y_train)\n",
    "y_test_one_hot = to_categorical(y_test)\n",
    "\n",
    "model.fit(x=X_train, y=y_train_one_hot, batch_size=16,\n",
    "          epochs=20, validation_data=(X_test, y_test_one_hot), callbacks=[EarlyStopping, tensorBoard])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ecbeb5eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-04T22:04:58.760053Z",
     "iopub.status.busy": "2024-10-04T22:04:58.759601Z",
     "iopub.status.idle": "2024-10-04T22:05:04.286798Z",
     "shell.execute_reply": "2024-10-04T22:05:04.285459Z"
    },
    "papermill": {
     "duration": 5.858698,
     "end_time": "2024-10-04T22:05:04.289485",
     "exception": false,
     "start_time": "2024-10-04T22:04:58.430787",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2476     1\n",
      "1047    10\n",
      "3164     6\n",
      "2372     7\n",
      "2107     7\n",
      "        ..\n",
      "4678    13\n",
      "1451     5\n",
      "4241    17\n",
      "1116    14\n",
      "1541    17\n",
      "Length: 1620, dtype: int8\n"
     ]
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=.7, random_state=42)\n",
    "print(y_test)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 929774,
     "sourceId": 1572891,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30626,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 25620.675431,
   "end_time": "2024-10-04T22:05:06.786534",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-04T14:58:06.111103",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
